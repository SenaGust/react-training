{"version":3,"sources":["components/formikCombobox/FormikCombobox.tsx","components/formikCheckbox/FormikCheckbox.tsx","components/formikInputText/FormikInputText.tsx","components/formikTextArea/FormikTextArea.tsx","components/createBeerFormik/CreateBeerFormik.tsx","App.tsx","serviceWorker.ts","index.tsx","logo.svg"],"names":["formikCombobox","props","label","name","fieldProps","Select","value","field","onChange","inputProps","elements","map","item","key","formikCheckbox","Checkbox","onBlur","color","FormikInputText","TextField","variant","FormikTextArea","type","rows","multiline","CreateBeerFormik","beerTypes","validationSchema","yup","shape","beerName","required","beerType","ingredients","initialValues","hasCorn","onSubmit","values","console","log","FormikProps","handleSubmit","FormikCombobox","FormikCheckbox","Button","disabled","isValid","dirty","App","className","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.8ec48951.chunk.js","sourcesContent":["import React from 'react';\nimport {FastField, FieldProps} from 'formik';\nimport {Select} from '@material-ui/core';\n\ninterface Props{\n    label: string,\n    elements: Array<string>,\n    name: string\n}\n\nfunction formikCombobox(props: Props) {\n    return (    \n        <div>\n            <label>\n                {props.label}\n                <FastField name={props.name}>\n                    { (fieldProps: FieldProps) => {\n                        return (\n                        <Select\n                            value={fieldProps.field.value}\n                            onChange={fieldProps.field.onChange}\n                            inputProps={{\n                                name: fieldProps.field.name\n                            }}>\n                               {\n                                   props.elements.map(item => (\n                                    <option key={item} value={item}>\n                                        {item}\n                                    </option>\n                                ))\n                               }\n                        </Select>);\n                    }}\n                </FastField>\n            </label>\n        </div>\n    );\n}\n\nexport default formikCombobox;","import React from 'react';\nimport {FastField, FieldProps} from 'formik';\nimport {Checkbox} from '@material-ui/core';\n\ninterface Props{\n    label: string,\n    name: string\n}\n\nfunction formikCheckbox(props: Props) {\n    return (\n        <div>\n            <label>\n                <FastField name={props.name}>\n                    {\n                        (fieldProps: FieldProps) => {\n                            return <Checkbox \n                                name={fieldProps.field.name}\n                                value={fieldProps.field.value || ''}\n                                onChange={fieldProps.field.onChange}\n                                onBlur={fieldProps.field.onBlur}\n                                color=\"primary\"\n                            />\n                        }\n                    }\n                </FastField>\n                {props.label}\n            </label>\n        </div>\n    );\n}\n\nexport default formikCheckbox;","import React from 'react';\nimport {FastField, FieldProps} from 'formik';\nimport {TextField} from '@material-ui/core';\n\ninterface Props{\n    label: string,\n    name: string\n}\n\nfunction FormikInputText(props: Props) {\n    return (\n        <div>\n                <FastField name={props.name}>\n                {(fieldProps: FieldProps) => {\n                    return (\n                        <TextField \n                        name={fieldProps.field.name} \n                        label={props.label} \n                        value={fieldProps.field.value}\n                        onChange={fieldProps.field.onChange}\n                        onBlur={fieldProps.field.onBlur}\n                        variant=\"outlined\" />\n                    );\n                }}\n                </FastField>\n        </div>\n    );\n}\n\nexport default FormikInputText;","import React from 'react';\nimport {FastField, FieldProps} from 'formik';\nimport {TextField} from '@material-ui/core'\n\ninterface Props{\n    label: string,\n    name: string\n}\n\nfunction FormikTextArea(props: Props) {\n    return (\n        <div>\n            <FastField type=\"text\" name={props.name}>\n                {\n                    (fieldProps: FieldProps) => {\n                        return (\n                            <TextField\n                            rows={2}\n                            multiline\n                            label={props.label}\n                            variant=\"outlined\"\n                            name={fieldProps.field.name}\n                            value={fieldProps.field.value}\n                            onChange={fieldProps.field.onChange}\n                            onBlur={fieldProps.field.onBlur}\n                            />\n                        );\n                    }\n                }    \n            </FastField>\n        </div>\n    );\n}\n\nexport default FormikTextArea;","import React from 'react';\nimport {Formik} from 'formik';\nimport * as yup from 'yup';\nimport Button from '@material-ui/core/Button';\nimport FormikCombobox from '../formikCombobox/FormikCombobox';\nimport FormikCheckbox from '../formikCheckbox/FormikCheckbox';\nimport FormikInputText from '../formikInputText/FormikInputText';\nimport FormikTextArea from '../formikTextArea/FormikTextArea';\n\nfunction CreateBeerFormik() {\n    const beerTypes = ['', 'Ale', 'Lager', 'Stout'];\n    const validationSchema = yup.object().shape({\n        beerName: yup.string().required(),\n        beerType: yup.string().required(),\n        ingredients: yup.string().required()\n    });\n    return (\n        <Formik\n            initialValues={{beerName: '', beerType: beerTypes[0], hasCorn: false, ingredients: ''}}\n            validationSchema={validationSchema}\n            onSubmit={(values) => {\n                console.log('submitting', values);\n            }}\n        >\n        {(FormikProps) => (\n            <form onSubmit={FormikProps.handleSubmit}>\n                <h1>Beer form</h1>\n                <FormikInputText label=\"Beer name:\" name=\"beerName\"/>\n                <FormikCombobox label=\"Beer type:\" elements={beerTypes} name=\"beerType\"/>\n                <FormikCheckbox label=\"Has corn\" name=\"hasCorn\"/>\n                <FormikTextArea label=\"Ingredients\" name=\"ingredients\"/>\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\" disabled={!(FormikProps.isValid && FormikProps.dirty)}> Submit </Button>\n            </form>\n        )}\n        </Formik>\n    );\n}\n\nexport default CreateBeerFormik;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CreateBeerFormik from './components/createBeerFormik/CreateBeerFormik'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    \n        <CreateBeerFormik />\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}