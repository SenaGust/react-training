{"version":3,"sources":["logo.svg","Form/CreateBeerFormCombobox.tsx","Form/CreateBeerFormCheckbox.tsx","Form/CreateBeerFormInputText.tsx","Form/CreateBeerFormTextArea.tsx","CreateBeerForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","CreateBeerFormCombobox","props","label","onChange","elements","map","item","key","value","CreateBeerForm","onClick","checked","type","CreateBeerFormInputText","useState","valueTextArea","onChangeTextArea","valueInputText","onChangeInputText","beerTypes","valueComboBox","onChangeComboBox","valueCheckBox","onChangeCheckBox","onSubmit","event","preventDefault","console","log","e","target","CreateBeerFormCheckbox","CreateBeerFormTextArea","App","className","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,kC,wLC0B5BC,MAjBf,SAAgCC,GAC5B,OACI,6BACI,+BACKA,EAAMC,MACP,4BAAQC,SAAUF,EAAME,UAClBF,EAAMG,SAASC,KAAI,SAAAC,GAAI,OACjB,4BAAQC,IAAKD,EAAME,MAAOF,GACrBA,UCElBG,MAXf,SAAwBR,GACpB,OACI,6BACI,+BACI,2BAAOS,QAAST,EAAME,SAAUQ,QAASV,EAAMO,MAAOI,KAAK,aAC1DX,EAAMC,SCMRW,MAXf,SAAiCZ,GAC7B,OACI,6BACI,+BACKA,EAAMC,MACP,2BAAOU,KAAK,OAAOJ,MAAOP,EAAMO,MAAOL,SAAUF,EAAME,cCMxDM,MAXf,SAAwBR,GACpB,OACI,6BACI,+BACKA,EAAMC,MACP,8BAAUM,MAAOP,EAAMO,MAAOL,SAAUF,EAAME,cCgB/CM,MAvBf,WACI,IADsB,EAMoBK,mBAAS,IAN7B,mBAMfC,EANe,KAMAC,EANA,OAOsBF,mBAAS,IAP/B,mBAOfG,EAPe,KAOCC,EAPD,KAQhBC,EAAY,CAAC,MAAO,QAAS,SARb,EASoBL,mBAASK,EAAU,IATvC,mBASfC,EATe,KASAC,EATA,OAUoBP,oBAAS,GAV7B,mBAUfQ,EAVe,KAUAC,EAVA,KAWtB,OACI,0BAAMC,SAXO,SAACC,GACdA,EAAMC,iBACNC,QAAQC,IAAIb,EAAeE,EAAgBG,EAAeE,KAUtD,yCACA,kBAAC,EAAD,CAAyBpB,MAAM,aAAaM,MAAOS,EAAgBd,SAAU,SAAA0B,GAAC,OAAIX,EAAkBW,EAAEC,OAAOtB,UAC7G,kBAAC,EAAD,CAAwBN,MAAM,aAAaE,SAAUe,EAAWX,MAAOY,EAAejB,SAAU,SAAA0B,GAAC,OAAIR,EAAiBQ,EAAEC,OAAOtB,UAC/H,kBAACuB,EAAD,CAAwB7B,MAAM,WAAWM,MAAOc,EAAenB,SAAU,SAAA0B,GAAC,OAAIN,GAAkBD,MAChG,kBAACU,EAAD,CAAwB9B,MAAM,cAAcM,MAAOO,EAAeZ,SAAU,SAAA0B,GAAC,OAAIb,EAAiBa,EAAEC,OAAOtB,UAC3G,4BAAQI,KAAK,UAAb,YCPGqB,MAZf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SAEzC,kBAAC,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.e595e492.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\ninterface Props{\n    label: string,\n    elements: Array<string>,\n    value: string,\n    onChange: (event: React.ChangeEvent<HTMLSelectElement>) => void\n}\n\nfunction CreateBeerFormCombobox(props: Props) {\n    return (    \n        <div>\n            <label>\n                {props.label}\n                <select onChange={props.onChange}>\n                    { props.elements.map(item => (\n                            <option key={item} value={item}>\n                                {item}\n                            </option>\n                        ))}\n                </select>\n            </label>\n        </div>\n    );\n}\n\nexport default CreateBeerFormCombobox;","import React from 'react';\n\ninterface Props{\n    label: string,\n    value: boolean,\n    onChange: (event: React.MouseEvent<HTMLInputElement>) => void\n}\n\nfunction CreateBeerForm(props: Props) {\n    return (\n        <div>\n            <label>\n                <input onClick={props.onChange} checked={props.value} type=\"checkbox\"/>\n                {props.label}     \n            </label>\n        </div>\n    );\n}\n\nexport default CreateBeerForm;","import React from 'react';\n\ninterface Props{\n    label: string,\n    value: string,\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nfunction CreateBeerFormInputText(props: Props) {\n    return (\n        <div>\n            <label>\n                {props.label}\n                <input type=\"text\" value={props.value} onChange={props.onChange} />\n            </label>\n        </div>\n    );\n}\n\nexport default CreateBeerFormInputText;","import React from 'react';\n\ninterface Props{\n    label: string,\n    value: string,\n    onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void\n}\n\nfunction CreateBeerForm(props: Props) {\n    return (\n        <div>\n            <label> \n                {props.label}\n                <textarea value={props.value} onChange={props.onChange} />\n            </label>\n        </div>\n    );\n}\n\nexport default CreateBeerForm;","import React, { BaseSyntheticEvent, useState } from 'react';\nimport CreateBeerFormCombobox from './Form/CreateBeerFormCombobox';\nimport CreateBeerFormCheckbox from './Form/CreateBeerFormCheckbox';\nimport CreateBeerFormInputText from './Form/CreateBeerFormInputText';\nimport CreateBeerFormTextArea from './Form/CreateBeerFormTextArea';\n\nfunction CreateBeerForm() {\n    const onSubmit = (event: BaseSyntheticEvent) => {\n        event.preventDefault();\n        console.log(valueTextArea, valueInputText, valueComboBox, valueCheckBox);\n    };\n\n    const [valueTextArea, onChangeTextArea] = useState(\"\");\n    const [valueInputText, onChangeInputText] = useState(\"\");\n    const beerTypes = ['Ale', 'Lager', 'Stout'];\n    const [valueComboBox, onChangeComboBox] = useState(beerTypes[0]);\n    const [valueCheckBox, onChangeCheckBox] = useState(false);\n    return (\n        <form onSubmit={onSubmit}>\n            <h1>Beer form</h1>\n            <CreateBeerFormInputText label=\"Beer name:\" value={valueInputText} onChange={e => onChangeInputText(e.target.value)}/>\n            <CreateBeerFormCombobox label=\"Beer type:\" elements={beerTypes} value={valueComboBox} onChange={e => onChangeComboBox(e.target.value)}/>\n            <CreateBeerFormCheckbox label=\"Has corn\" value={valueCheckBox} onChange={e => onChangeCheckBox(!valueCheckBox)}/>\n            <CreateBeerFormTextArea label=\"Ingredients\" value={valueTextArea} onChange={e => onChangeTextArea(e.target.value)} />\n            <button type=\"submit\">Submit</button>\n        </form>\n    );\n}\n\nexport default CreateBeerForm;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CreateBeerForm from './CreateBeerForm'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n        <CreateBeerForm />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}